
CREATE TABLE IF NOT EXISTS "images" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"image" TEXT NOT NULL,
	"created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



CREATE TABLE IF NOT EXISTS "users"(
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"username" VARCHAR(30) UNIQUE NOT NULL,
	"email" VARCHAR(50) UNIQUE NOT NULL,
	"password" VARCHAR(50) NOT NULL,
	"profile_pic_id" INTEGER,
	"banner_id" INTEGER,
	"genre" VARCHAR(20) CHECK(genre IN ('male', 'female', 'others')),
	"birthday" DATE,
	"notes" VARCHAR(255), /*Users notes not shown to anyone*/ 
	"join_date" DATE DEFAULT CURRENT_DATE,
	"updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	"profile" TEXT,
	"admin" BOOLEAN DEFAULT FALSE,
	"banned" BOOLEAN DEFAULT FALSE,
	FOREIGN KEY ("profile_pic_id") REFERENCES "images"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("banner_id") REFERENCES "images"("id")
	ON DELETE SET NULL
);
CREATE INDEX "idx_users_username" ON "users"("username");
CREATE INDEX "idx_users_admin" ON "users"("admin");
CREATE INDEX "idx_users_email.passward" ON "users"("email","password");
CREATE INDEX "idx_users_profile_pic_id" ON "users"("profile_pic_id");
CREATE INDEX "idx_users_banner_id" ON "users"("banner_id");



CREATE TABLE IF NOT EXISTS "user_images" (
	"user_id" INTEGER NOT NULL,
	"image_id" INTEGER NOT NULL,
	PRIMARY KEY ("user_id", "image_id"),
	FOREIGN KEY ("image_id") REFERENCES "images"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx__user_images__user_id" ON "user_images"("user_id");
CREATE INDEX "idx__user_images__image_id" ON "user_images"("image_id");



CREATE TABLE IF NOT EXISTS "timezones" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(100) UNIQUE
);


/*Just messing around with costum datatype*/
CREATE TYPE DATEFORMAT AS ENUM ('DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY/MM/DD');

CREATE TABLE IF NOT EXISTS "user_settings" (
	"user_id" INTEGER PRIMARY KEY NOT NULL,
	"timezone_id" INTEGER DEFAULT 1,
	"date_format" DATEFORMAT DEFAULT 'YYYY/MM/DD' ,
	"hide_info" BOOLEAN DEFAULT true, 
	"hide_post" BOOLEAN DEFAULT false,
	"private_message" BOOLEAN DEFAULT true,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("timezone_id") REFERENCES "timezones"("id")
	ON DELETE SET NULL
);



/*I haven't added the forum part yet DELETE LATER PROBABLY*/
CREATE TABLE IF NOT EXISTS "user_forum_settings" (
	"user_id" INTEGER PRIMARY KEY,
	"title" VARCHAR(20),
	"image" TEXT,
	"signature" VARCHAR(255),
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE
);

/*messing with costum types*/
CREATE TYPE friendship_status AS ENUM ('pending', 'accepted');

CREATE TABLE IF NOT EXISTS "friends" (
	"user_id" INTEGER NOT NULL,
	"friend_id" INTEGER NOT NULL,
	"status" friendship_status DEFAULT 'pending',
	"muted" BOOLEAN DEFAULT false,
	"requested_at" DATE DEFAULT CURRENT_DATE,
	"accepted_at" DATE,
	PRIMARY KEY ("user_id", "friend_id"),
    FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
    FOREIGN KEY ("friend_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
    CHECK ("user_id" <> "friend_id")
);
CREATE INDEX "idx__friends__user_id" ON "friends"("user_id");
CREATE INDEX "idx__friends__friend_id" ON "friends"("friend_id");
/*to order friends by newest and oldest*/
CREATE INDEX "idx__friends__accepted_at" ON "friends"("accepted_at");




CREATE TABLE IF NOT EXISTS "blocks" (
    "blocker_id" INTEGER NOT NULL,
    "blocked_id" INTEGER NOT NULL,
    "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY ("blocker_id", "blocked_id"),
    FOREIGN KEY ("blocker_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
    FOREIGN KEY ("blocked_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
    CHECK ("blocker_id" <> "blocked_id")
);
CREATE INDEX "idx_blocks_blocker_id" ON "blocks"("blocker_id");
CREATE INDEX "idx_blocks_blocked_id" ON "blocks"("blocked_id");



CREATE TABLE IF NOT EXISTS "posts" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"user_id" INTEGER NOT NULL,
	"content" TEXT NOT NULL,
	"created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	"edited_at" TIMESTAMP,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx_posts_user_id" ON "posts"("user_id");
CREATE INDEX "idx_posts_created_at" ON "posts"("created_at");



CREATE TABLE IF NOT EXISTS "comments"(
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"post_id" INTEGER NOT NULL,
	"user_id" INTEGER NOT NULL,
	"comment_id" INTEGER DEFAULT NULL,
	"content" TEXT NOT NULL,
	"created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	"edited_at" TIMESTAMP,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("post_id") REFERENCES "posts"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("comment_id") REFERENCES "comments"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx_comments_user_id" ON "comments"("user_id");
CREATE INDEX "idx_comments_post_id" ON "comments"("post_id");
CREATE INDEX "idx_comments_comment_id" ON "comments"("comment_id");
CREATE INDEX "idx_comments_created_at" ON "comments"("created_at");



CREATE TABLE IF NOT EXISTS "reactions" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"name" VARCHAR(20) NOT NULL,
	"icon" VARCHAR NOT NULL
);



CREATE TABLE IF NOT EXISTS "post_reactions"(
	"post_id" INTEGER NOT NULL,
	"reaction_id" INTEGER NOT NULL,
	"user_id" INTEGER NOT NULL,
	PRIMARY KEY ("post_id","reaction_id","user_id"),
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("post_id") REFERENCES "posts"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("reaction_id") REFERENCES "reactions"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx__post_reactions__post_id" ON "post_reactions"("post_id");
CREATE INDEX "idx__post_reactions__reaction_id" ON "post_reactions"("reaction_id");
CREATE INDEX "idx__post_reactions__user_id" ON "post_reactions"("user_id");



CREATE TABLE IF NOT EXISTS "comment_reactions"(
	"comment_id" INTEGER NOT NULL,
	"reaction_id" INTEGER NOT NULL,
	"user_id" INTEGER NOT NULL,
	PRIMARY KEY ("comment_id","reaction_id","user_id"),
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("comment_id") REFERENCES "comments"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("reaction_id") REFERENCES "reactions"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx__comments_reactions__comment_id" ON "comment_reactions"("comment_id");
CREATE INDEX "idx__comments_reactions__reaction_id" ON "comment_reactions"("reaction_id");
CREATE INDEX "idx__comments_reactions__user_id" ON "comment_reactions"("user_id");



CREATE TABLE IF NOT EXISTS "reports" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"type" VARCHAR(30) CHECK ("type" in ('Adult Content', 'Violence', 'Hate Speech', 'Spam', 'other')),
	"identifier" VARCHAR(30) CHECK ("identifier" IN ('posts', 'comments')),
	"message" VARCHAR(255),
	"created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	"status" VARCHAR(20) DEFAULT 'Submitted' CHECK ("status" in ('Submitted', 'Reviewing', 'Closed')),
	"resolved_at" TIMESTAMP,
	"admin_id" INTEGER,
	"action" VARCHAR(20) CHECK (
						"action" IN ('Content Removed', 'Banned', 'No Violation')
						),
	"admin_message" VARCHAR(255)
);
CREATE INDEX "idx_reports_created_at" ON "reports"("created_at");
CREATE INDEX "idx_reports_type" ON "reports"("type");
CREATE INDEX "idx_reports_status" ON "reports"("status");
CREATE INDEX "idx_reports_admin_id" ON "reports"("admin_id");



CREATE TABLE IF NOT EXISTS "post_reports" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"post_id" INTEGER ,
	"user_id" INTEGER ,
	"report_id" INTEGER NOT NULL,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("post_id") REFERENCES "posts"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("report_id") REFERENCES "reports"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx__post_reports_report_id" ON "post_reports"("report_id");
CREATE INDEX "idx__post_reports_post_id" ON "post_reports"("post_id");
CREATE INDEX "idx__post_reports_user_id" ON "post_reports"("user_id");



CREATE TABLE IF NOT EXISTS "comment_reports" (
	"id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"comment_id" INTEGER ,
	"user_id" INTEGER ,
	"report_id" INTEGER NOT NULL,
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("comment_id") REFERENCES "comments"("id")
	ON DELETE SET NULL,
	FOREIGN KEY ("report_id") REFERENCES "reports"("id")
	ON DELETE CASCADE
);
CREATE INDEX "idx__comment_reports__report_id" ON "comment_reports"("report_id");
CREATE INDEX "idx__comment_reports__user_id" ON "comment_reports"("user_id");
CREATE INDEX "idx__comment_reports__comment_id" ON "comment_reports"("comment_id");



CREATE TABLE IF NOT EXISTS "notifications" (
	"user_id" INTEGER,
	"post_id" INTEGER,
	"seen" BOOLEAN DEFAULT false,
	PRIMARY KEY ("user_id","post_id"),
	FOREIGN KEY ("user_id") REFERENCES "users"("id")
	ON DELETE CASCADE,
	FOREIGN KEY ("post_id") REFERENCES "posts"("id")
	ON DELETE CASCADE
);




	
CREATE OR REPLACE FUNCTION "update_update_timestamp"()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	NEW."updated_at" := CURRENT_TIMESTAMP;
	RETURN NEW;
END;
$$;
CREATE TRIGGER "trg_update_user_profile"
BEFORE UPDATE ON "users"
FOR EACH ROW
EXECUTE FUNCTION "update_update_timestamp"();


/*this doesn't work because with AFTER DELETE the trigger is run after on delete cascade 
so the reference to the user in user_images don't exist when the function is called
And if i use BEFORE DELETE there conflict because on delete cascade from  users and images will both
try to delete from user_images and postgresql throw an error*/
CREATE OR REPLACE FUNCTION "delete_deleted_user_images"()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	DELETE FROM "images" 
	WHERE "id" IN (
		SELECT "image_id" FROM "user_images" WHERE "user_id" = OLD."id"
	);
	RETURN OLD;
END;
$$;
CREATE TRIGGER "trg_cleanup_user_images"
AFTER DELETE ON "users"
FOR EACH ROW
EXECUTE FUNCTION "delete_deleted_user_images"();



CREATE OR REPLACE FUNCTION "update_post_edited_timestamp"()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	RAISE NOTICE 'Trigger activated for post ID %', NEW.id;
	NEW."edited_at" := CURRENT_TIMESTAMP;
	RETURN NEW;
END;
$$;
CREATE TRIGGER "trg_update_post_edited_timestamp"
BEFORE UPDATE ON "posts"
FOR EACH ROW
EXECUTE FUNCTION "update_post_edited_timestamp"();



CREATE OR REPLACE FUNCTION "update_comment_edited_timestamp"()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	NEW."edited_at" := CURRENT_TIMESTAMP;
	RETURN NEW;
END;
$$;
CREATE TRIGGER "trg_update_comment_edited_timestamp"
BEFORE UPDATE ON "comments"
FOR EACH ROW
EXECUTE FUNCTION "update_comment_edited_timestamp"();



CREATE OR REPLACE FUNCTION "notify_friends"()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	INSERT INTO "notifications" ("user_id", "post_id")
	SELECT "friends"."user_id", NEW."id"
	FROM "friends"
	WHERE "friends"."friend_id" = NEW."user_id"
		AND "friends"."muted" = false ;
	RETURN NULL;
END;
$$;
CREATE TRIGGER "trg_notify_friends"
AFTER INSERT ON "posts"
FOR EACH ROW
EXECUTE FUNCTION "notify_friends"()

	